<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>BFS - Tag - JYUKKI&#39;s BLOG</title>
        <link>http://jyukki97.github.io/tags/bfs/</link>
        <description>BFS - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Apr 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://jyukki97.github.io/tags/bfs/" rel="self" type="application/rss+xml" /><item>
    <title>[백준]1194 달이 차오른다, 가자</title>
    <link>http://jyukki97.github.io/2020-04-16-1194/</link>
    <pubDate>Thu, 16 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-04-16-1194/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1194
풀이: b[x][y][key] : key를 들고, (x, y) 방문했다면, 1, 방문하지 않았다면 0
0부터 BFS를 시작한다.
오른쪽, 왼쪽, 위, 아래를 갈 수 있는데,
만약 갈 수 있는곳이 빈 곳(' . &lsquo;) 이고, 방문하지 않았다면, 방문하고, 방문표시를 한다.
만약 갈 수 있는 곳이 문(대문자) 이고, 방문하지 않았다면, 현재 key가 있는지 확인하고, key가 있다면
방문하고, 방문표시를 한다.
만약 갈 수 있는 곳이 열쇠(소문자) 라면, 얻은 열쇠를 key값에 적용시켜준다.
출구(&lsquo;1&rsquo;) 를 만난다면 반복을 중단한다.]]></description>
</item><item>
    <title>[백준]1525 퍼즐</title>
    <link>http://jyukki97.github.io/2020-04-15-1525/</link>
    <pubDate>Wed, 15 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-04-15-1525/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1525
풀이:    0 1 2     3 4 5   6 7 8    이렇게 퍼즐이 배열되어 있다고 가정하자.
우리는 이것을 012345678 -&gt; int형으로 바꿔 생각하도록 하자.
이 때, 0이 맨 앞에 나올 경우 무시되므로 0 -&gt; 9 로 바꿔서
912345678 로 나타내도록 하자.
우리가 찾아야 하는 퍼즐의 상태는 123456789 이다.
주어진 퍼즐에서 9를 오른쪽, 왼쪽, 위, 아래 로 옮기면서, 123456789가 되는 지점 까지 BFS를 돌린다.]]></description>
</item><item>
    <title>[백준]5214 환승</title>
    <link>http://jyukki97.github.io/2020-04-11-5214/</link>
    <pubDate>Sat, 11 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-04-11-5214/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/5214
풀이: s[i] : i 번째 하이퍼 튜브에 연결 되어 있는 모든 역
v[i] : i 번 역이 들어있는 하이퍼 튜브
1부터 bfs를 돌아 N번째 역에 도착할 때 지나온 역의 갯수를 출력한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  #include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std; int n, m, k, i, t, w, d, c[1005], b[100005] = { 1,1 }; int main() { cin &gt;&gt; n &gt;&gt; k &gt;&gt; m; vector&lt;vector&lt;int&gt;&gt; s(m + 1), v(n + 1); queue&lt;int&gt; q; for (q.]]></description>
</item><item>
    <title>[백준]2589 보물섬</title>
    <link>http://jyukki97.github.io/2020-04-10-2589/</link>
    <pubDate>Fri, 10 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-04-10-2589/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2589
풀이: 모든 L을 전부 찾는다.
현재 L에서 최단 거리로 가장 먼 거리가
현재 저장된 거리보다 크다면 현재 저장된 거리를 바꾼다.
최대 거리를 출력한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  #include &lt;iostream&gt;#include &lt;queue&gt;using namespace std; int n, m, i, t, s, y; string c[55]; int main() { cin &gt;&gt; n &gt;&gt; m; for (; i &lt; n; i++)	cin &gt;&gt; c[i]; for (i = 0; i &lt; n; i++)	for (t = 0; t &lt; m; t++, s = y - 1 &gt; s ?]]></description>
</item><item>
    <title>[백준]5014 스타트링크</title>
    <link>http://jyukki97.github.io/2020-04-09-5014/</link>
    <pubDate>Thu, 09 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-04-09-5014/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/5014
풀이: 현재 층 S부터 +U, -D 를 하며 모든 층을 찾아간다.
만약 찾는 층에 도달했다면 버튼을 몇 번 눌렀는지 출력한다.
만약 1 ~ F 층까지 갈 수 있는 모든 층을 가봤지만 G층에 도달 할 수 없다면, &ldquo;use the stairs&quot;를 출력한다.
S가 G와 같다면 0을 출력한다.
1층 부터 시작이므로 주의하자. (0층은 없다.)
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include &lt;iostream&gt;#include &lt;queue&gt;using namespace std; int F, S, G, U, D, i, s, a, b[1000005]; int main() { cin &gt;&gt; F &gt;&gt; S &gt;&gt; G &gt;&gt; U &gt;&gt; D; queue&lt;int&gt; q; q.]]></description>
</item><item>
    <title>[백준]2644 촌수계산</title>
    <link>http://jyukki97.github.io/2020-03-15-2644/</link>
    <pubDate>Sun, 15 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-03-15-2644/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2644
풀이: [C++]다익스트라 알고리즘(Dijkstra Algorithm) 참고
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  #include &lt;iostream&gt;#include &lt;queue&gt;#include &lt;vector&gt;using namespace std; int n, k, e, q, w, m, d[102], b[102]; int main() { cin &gt;&gt; n &gt;&gt; k &gt;&gt; e &gt;&gt; m; vector&lt;vector&lt;int&gt;&gt; a(n + 1); priority_queue&lt;pair&lt;int, int&gt;&gt; p; while(m--) { cin &gt;&gt; q &gt;&gt; w; a[q].]]></description>
</item><item>
    <title>[백준]2583 영역 구하기</title>
    <link>http://jyukki97.github.io/2020-03-14-2583/</link>
    <pubDate>Sat, 14 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-03-14-2583/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2583
풀이: 직사각형이 들어있는 곳을 1,
없는곳을 0으로 해놓은 배열을 만든다.
배열을 순회하며, 현재 값이 0 이라면, 영역의 개수를 +1 해주고,
연결된 모든 영역을 순회하여 1로 바꿔주고, 영역의 넓이를 배열에 저장한다.
배열의 모든 숫자가 1이라면,
영역의 개수를 출력하고,
각 영역의 넓이를 오름차순으로 출력한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int n, m, k, i, t, a[102][102], x1, x2, yl, y2, s = 0, b[5002]; void A(int x, int y) { a[x][y] = 1, b[s - 1]++; if (x &gt; 0 &amp;&amp; !]]></description>
</item><item>
    <title>[백준]2468 안전 영역</title>
    <link>http://jyukki97.github.io/2020-03-13-2468/</link>
    <pubDate>Fri, 13 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-03-13-2468/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2468
풀이: 물의 높이가 h 일 때,
지역의 높이가 h보다 작거나 같다면 잠겨있는 지역이라고 한다.
모든 지역을 순회하며,
현재 지역이 잠겨있지 않다면, 방문 표시를 해두고,
왼쪽, 오른쪽, 위, 아래 에 잠겨있지 않은 곳을 순회하며 방문표시를 한다.
연결된 모든 곳을 방문했다면, 안전한 영역을 +1 해준다.
물의 높이를 0 ~ (지역 중 최대 높이) 까지 순회한 후
안전한 영역의 최대치를 출력한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #include &lt;iostream&gt;#define F(i,n)for(int i=0;i&lt;n;i++) using namespace std; int n, m = 0, a[102][102], b[102][102], s, r = 0; void A(int x, int y) { b[x][y] = 0; if (x &gt; 0 &amp;&amp; b[x - 1][y])	A(x - 1, y); if (y &gt; 0 &amp;&amp; b[x][y - 1])	A(x, y - 1); if (x + 1 &lt; n &amp;&amp; b[x + 1][y])	A(x + 1, y); if (y + 1 &lt; n &amp;&amp; b[x][y + 1])	A(x, y + 1); } int main() { cin &gt;&gt; n; F(i,n)F(t,n){ cin &gt;&gt; a[i][t]; m = m &lt; a[i][t] ?]]></description>
</item><item>
    <title>[백준]11724 연결 요소의 개수</title>
    <link>http://jyukki97.github.io/2020-03-12-11724/</link>
    <pubDate>Thu, 12 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-03-12-11724/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/11724
풀이: 방문하지 않은 정점과 연결된 모든 정점을 방문표시하고, 요소의 개수를 +1 해준다.
더이상 방문할 정점이 없을때까지 반복한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include &lt;iostream&gt;#include &lt;vector&gt;using namespace std; int n, m, i, t, c = 0, b[1002]; vector&lt;vector&lt;int&gt;&gt; a; void T(int x) { if (b[x]) return; b[x] = 1; for (int o : a[x])	T(o); } int main() { cin &gt;&gt; n &gt;&gt; m; a.]]></description>
</item><item>
    <title>[백준]1697 숨바꼭질</title>
    <link>http://jyukki97.github.io/2020-02-29-1697/</link>
    <pubDate>Sat, 29 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://jyukki97.github.io/2020-02-29-1697/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1697
풀이: 현재 위치를 x라고 할 때, x + 1, x - 1, x * 2 위치를 BFS 를 통해 하나씩 찾아간다.
동생의 위치와 같아진다면 몇번 이동했는지 출력한다.
x + 1 은 동생의 위치보다 커질 필요가없으므로 동생의 위치보다 작을때만 이동한다. x * 2 는 동생의 위치 + 1 보다 크다면 (x - 2) * 2 를 하는 것이 이득이므로 제외한다. 현재 위치는 0보다 작아질 수 없으므로 제외한다. 이미 한번 방문한 위치는 다시 방문할 필요없으므로 제외시킨다.]]></description>
</item></channel>
</rss>
