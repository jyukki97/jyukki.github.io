<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>DP - Tag - JYUKKI&#39;s BLOG</title>
        <link>https://jyukki97.github.io/tags/dp/</link>
        <description>DP - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 04 Jul 2021 22:00:40 &#43;0800</lastBuildDate><atom:link href="https://jyukki97.github.io/tags/dp/" rel="self" type="application/rss+xml" /><item>
    <title>[백준]2550 전구</title>
    <link>https://jyukki97.github.io/2550/</link>
    <pubDate>Sun, 04 Jul 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2550/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2550
풀이: 전기줄 - 2 참고
코드: 사용언어 : python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import bisect d,q,c,e={},[],[],[] n=int(input()) for i in map(int,input().split()): d[i]=0 for k,i in enumerate(map(int,input().split())): d[i]=k for k,i in d.items(): s=bisect.bisect_left(q,i) if s!=len(q):q[s]=i else:q+=[i] c+=[s] s=len(q) print(s) for i in range(n-1,-1,-1): if c[i]==s-1:e+=[list(d)[i]];s-=1 print(&#39; &#39;.join(map(str,sorted(e))))   ]]></description>
</item><item>
    <title>[백준]18353 병사 배치하기</title>
    <link>https://jyukki97.github.io/18353/</link>
    <pubDate>Sat, 03 Jul 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/18353/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/18353
풀이: 가장 긴 증가하는 부분 수열 5 참고
정확히 말하면 가장 긴 감소하는 부분 수열이지 않을까? 라는 생각이 드는 문제이다.
말 그대로 감소하는 것이기에 뒤에서부터 증가하는 수열을 찾을까? 라는 생각이 들었지만,
귀찮은 관계로 모든 수에 음수 처리를 해주어 가장 긴 증가하는 부분 수열을 찾게되었다.
코드: 사용언어 : python
1 2 3 4 5 6 7 8  import bisect n=int(input()) q=[] for i in map(int,input().split()): s=bisect.bisect_left(q,-i) if s!=len(q):q[s]=-i else:q+=[-i] print(n-len(q))   ]]></description>
</item><item>
    <title>[백준]4198 열차정렬</title>
    <link>https://jyukki97.github.io/4198/</link>
    <pubDate>Wed, 30 Jun 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/4198/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/4198
풀이: 가장 긴 증가하는 부분수열 문제와 비슷하게 풀 수 있다.
가장 긴 증가하는 부분 수열 5 참고
1 ~ N 까지의 모든 차량을 살펴보면서 진행한다.
현재 차량이 i 일 때, i번째 차량을 기준으로 생각한다.
i+1 ~ N 까지의 차량 중 i 번째 차량을 시작점으로 가장 긴 증가하는 부분수열의 길이를 구하고, 반대로 가장 긴 감소하는 부분수열의 길이를 구한다.
두 부분수열의 길이를 합한 값 중 가장 큰 값을 찾는다.
코드: 사용언어 : python]]></description>
</item><item>
    <title>[백준]4811 알약</title>
    <link>https://jyukki97.github.io/4811/</link>
    <pubDate>Wed, 23 Jun 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/4811/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/4811
풀이: 카탈란 수 문제이다.
깔끔하게 카탈란 수로 풀어주자.
$${2nCn \over n + 1}$$
코드: 사용언어 : python
1 2  from math import factorial as f while a:=int(input()): print(f(2*a)//(f(a)*f(a+1)))   ]]></description>
</item><item>
    <title>[백준]9252 LCS 2</title>
    <link>https://jyukki97.github.io/9252/</link>
    <pubDate>Tue, 22 Jun 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/9252/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/9252
풀이:    0 A C A Y K P     C 0 1 1 1 1 1   A 1 1 2 2 2 2   P 1 1 2 2 2 2   C 1 2 2 2 2 3   A 1 2 3 3 3 3   K 1 2 3 3 4 4    첫 번째 문자열을 : A]]></description>
</item><item>
    <title>[백준]17271 리그 오브 레전설 (Small)</title>
    <link>https://jyukki97.github.io/2021-01-02-17271/</link>
    <pubDate>Sat, 02 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2021-01-02-17271/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/17271
풀이: [백준]2624 동전 바꿔주기 참고
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9  #include&lt;iostream&gt;using namespace std; long long d[10005] = { 1,1 }, n, m, i; int main() { cin &gt;&gt; n &gt;&gt; m; for (i = 2; i &lt;= n; i++) d[i] = (d[i - 1] + (i - m &gt;= 0 ? d[i - m] : 0)) % 1000000007; cout &lt;&lt; d[n] &lt;&lt; endl; }   ]]></description>
</item><item>
    <title>[백준]17268 미팅의 저주</title>
    <link>https://jyukki97.github.io/2020-12-31-17268/</link>
    <pubDate>Thu, 31 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-12-31-17268/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/17268
풀이: n = 2 &hellip;. 1
n = 4 &hellip;. 2
n = 6 &hellip;. 5
n = 8 &hellip;. 14
.
.
.
1, 2, 5, 14 &hellip; 로 진행되는 수열인 카탈란 수 이다.
카탈란 수는 $$ C_i = {2i \choose i} - {2i \choose i + 1} $$ 이다.
이를 점화식으로 표현하면 $$ C_n = \sum_{i=0}^{n-1}C_iC_{n-1-i} $$ 이 된다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12  #include &lt;iostream&gt;using namespace std; long long dp[5005] = { 1 }, n, i, t; int main() { cin &gt;&gt; n; for (i = 1; i &lt;= n / 2; i++) { for (t = 0; t &lt; i; t++) { dp[i] = (dp[i] + dp[t] * dp[i - 1 - t]) % 987654321; } } cout &lt;&lt; dp[n / 2] &lt;&lt; endl; }   ]]></description>
</item><item>
    <title>[백준]3056 007</title>
    <link>https://jyukki97.github.io/2020-04-18-3056/</link>
    <pubDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-04-18-3056/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/3056
풀이: d[x] : 비트마스크가 x인 미션을 완료 할 확률
비트마스크 x : 나누어 준 미션은 1, 아직 나누어 주지 않은 미션은 0
비트마스크가 1, 10, 100, 1000 &hellip;.. 등 1의 갯수가 1개인 것은 첫 번째 지미 본드가 수행한다고 한다.
비트마스크가 11, 110, 1100, 11000 &hellip;.. 등 1의 갯수가 2개인 것은 두 번째 지미 본드가 수행한다고 한다.
&hellip;.
비트마스크를 0 ~ (1 &laquo; n) 까지 순회한다.
현재의 비트마스크를 i 라고 하자, 그 비트의 중간에 0이 들어있다면, 그 위치에 1을 넣는다.]]></description>
</item><item>
    <title>[백준]1102 발전소</title>
    <link>https://jyukki97.github.io/2020-04-17-1102/</link>
    <pubDate>Fri, 17 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-04-17-1102/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1102
풀이: 발전소의 현재 상태를 2진수로 표현한다.
ex) YNN -&gt; 100
l : 발전소의 현재 상태를 2진수로 표현한 값
z : 발전소가 현재 켜져있는 갯수
z가 p보다 크거나 같아진다면 반복을 종료한다.
d[x] : x상태인 발전소를 만드는데 필요한 비용
d[x] = min(d[x], B(x | (1&laquo;y), z + 1) + a[u][y])
현재 발전소의 상태에서 안켜진 부분을 키되, 가장 적은 비용으로 킨 후 z를 + 1 한다.
p값이 0이라면 발전소를 킬 필요가 없으므로 0을 출력]]></description>
</item><item>
    <title>[백준]1254 팰린드롬 만들기</title>
    <link>https://jyukki97.github.io/2020-04-14-1254/</link>
    <pubDate>Tue, 14 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-04-14-1254/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1254
풀이: 기준점 i를 잡는다. (초기 i값은 문자열 S의 중간 지점)
기준점 i와 i - 1을 기준으로 짝수 팰린드롬을 만들 수 있는지 확인한다.
만들 수 없다면,
기준점 i를 기준으로 홀수 팰린드롬을 만들 수 있는지 확인한다.
만들 수 없다면,
기준점 i를 +1 해준다.
짝수 팰린드롬을 만들 수 있다면, 2 * ( i - 1 ) 을 출력한다.
홀수 팰린드롬을 만들 수 있다면, 2 * i - 1 을 출력한다.
코드: 사용언어 : c++]]></description>
</item></channel>
</rss>
