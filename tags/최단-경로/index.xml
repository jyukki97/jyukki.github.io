<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>최단 경로 - Tag - JYUKKI&#39;s BLOG</title>
        <link>https://jyukki97.io/tags/%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C/</link>
        <description>최단 경로 - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 03 Mar 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jyukki97.io/tags/%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C/" rel="self" type="application/rss+xml" /><item>
    <title>[백준]11404 웜홀</title>
    <link>https://jyukki97.io/2020-03-03-11404/</link>
    <pubDate>Tue, 03 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-03-03-11404/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/11404
풀이: [C++]플로이드-와샬 알고리즘(Bellman-Ford Algorithm) 참고
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int	n, m, i, a1, a2, a3, a[102][102]; int main() { cin &gt;&gt; n &gt;&gt; m; fill(a[0], a[0] + 10404, 987654321); for (i = 0; i &lt; m; i++) { cin &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; a3; a[a1][a2] = min(a[a1][a2], a3); } for (i = 1; i &lt;= n; i++) for (int t = 1; t &lt;= n; t++) for (int y = 1; y &lt;= n; y++) if (t == y) a[t][y] = 0; else	a[t][y] = min(a[t][y], a[t][i] + a[i][y]); for (i = 1; i &lt;= n; i++) { for (int t = 1; t &lt;= n; t++) if (a[i][t] == 987654321)	cout &lt;&lt; &#34;0 &#34;; else	cout &lt;&lt; a[i][t] &lt;&lt; &#34; &#34;; cout &lt;&lt; endl; } }   ]]></description>
</item><item>
    <title>[백준]1865 웜홀</title>
    <link>https://jyukki97.io/2020-03-03-1865/</link>
    <pubDate>Tue, 03 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-03-03-1865/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1865
풀이: [C++]벨만-포드 알고리즘(Bellman-Ford Algorithm) 참고
벨만-포드 알고리즘으로 모든 정점을 순환 한 뒤, 음수 사이클이 있는지 판단 후 있다면, &ldquo;YES&rdquo; 를 없다면 &ldquo;NO&quot;를 출력한다. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  #include &lt;iostream&gt;#include &lt;vector&gt;using namespace std; int	T, n, m, k, i, d[502], a1, a2, a3; int main() { cin &gt;&gt; T; while (T--) { bool b = true; cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; vector&lt;pair&lt;pair&lt;int, int&gt;, int&gt;&gt; a; for (i = 0; i &lt; m; i++) { cin &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; a3; a.]]></description>
</item><item>
    <title>[백준]11657 타임머신</title>
    <link>https://jyukki97.io/2020-03-02-11657/</link>
    <pubDate>Mon, 02 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-03-02-11657/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/11657
풀이: [C++]벨만-포드 알고리즘(Bellman-Ford Algorithm) 참고
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  #include &lt;iostream&gt;using namespace std; #define INF 987654321 int	n, m, i, d[502], a1, a2, a3; pair&lt;pair&lt;int, int&gt;, int&gt; a[6002]; int main() { cin &gt;&gt; n &gt;&gt; m; for (i = 0; i &lt; m; i++) cin &gt;&gt; a[i].]]></description>
</item><item>
    <title>[백준]9370 미확인 도착지</title>
    <link>https://jyukki97.io/2020-03-02-9370/</link>
    <pubDate>Mon, 02 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-03-02-9370/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/9370
풀이: [C++]다익스트라 알고리즘(Dijkstra Algorithm) 참고
s -&gt; g -&gt; h -&gt; x
s -&gt; h -&gt; g -&gt; x
두 가지 경로가 있는데, 둘 중 하나라도 최단 경로일 경우 x를 배열에 저장한다.
저장된 x를 오름차순으로 출력한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  #include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std; int T, n, m, t, u, v, w, i, s, g, h, v1, v2, a1, c, d[2002]; bool b[2002]; priority_queue&lt;pair&lt;int, int&gt;&gt; p; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q; int main() { cin &gt;&gt; T; while (T--) { cin &gt;&gt; n &gt;&gt; m &gt;&gt; t; vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; a(n + 1); cin &gt;&gt; s &gt;&gt; g &gt;&gt; h; for (i = 0; i &lt; m; i++) { cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; a[u].]]></description>
</item><item>
    <title>[백준]1504 최단 경로</title>
    <link>https://jyukki97.io/2020-03-01-1504/</link>
    <pubDate>Sun, 01 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-03-01-1504/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1504
풀이: [C++]다익스트라 알고리즘(Dijkstra Algorithm) 참고
지나야 하는 두 개의 정점을 v1, v2 라고 할때,
1 ~ v1 ~ v2 ~ N
1 ~ v2 ~ v1 ~ N
으로 나눠서 풀어본다.
1~v1, v2 과 v1 ~ v2 과 v1, v2 ~ N 을 다익스트라 알고리즘으로 각각 구하여 더한값이
최소인 값을 구한다. 만약 경로가 없다면 -1을 출력한다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76  #include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std; int V, E, u, v, w, i, d[805], v1, v2, a1, a2; priority_queue&lt;pair&lt;int, int&gt;&gt; p; bool b[805]; int main() { cin &gt;&gt; V &gt;&gt; E; vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt;a(V + 1); for (i = 0; i &lt; E; i++) { cin &gt;&gt; u &gt;&gt; v &gt;&gt; w; a[u].]]></description>
</item><item>
    <title>[백준]1753 최단 경로</title>
    <link>https://jyukki97.io/2020-03-01-1753/</link>
    <pubDate>Sun, 01 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-03-01-1753/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1753
풀이: [C++]다익스트라 알고리즘(Dijkstra Algorithm) 참고
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  #include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std; int V, E, k, u, v, w, i; vector&lt;int&gt; d; priority_queue&lt;pair&lt;int, int&gt;&gt; p; bool b[20002]; int main() { cin &gt;&gt; V &gt;&gt; E &gt;&gt; k; vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt;a(V + 1); for (i = 0; i &lt;= V; i++) d.]]></description>
</item><item>
    <title>[C&#43;&#43;]플로이드-와샬 알고리즘(Floyd-Warshall Algorithm)</title>
    <link>https://jyukki97.io/2020-02-27-floydwarshall/</link>
    <pubDate>Thu, 27 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-02-27-floydwarshall/</guid>
    <description><![CDATA[플로이드-와샬 알고리즘(Floyd-Warshall Algorithm)
플로이드-와샬 알고리즘(Floyd-Warshall Algorithm) 한번의 실행으로 &ldquo;모든 노드&rdquo; 간 최단 경로를 구하는 알고리즘. 시간복잡도 $$ O(n^3) $$
위 그림의 초기값은 다음과 같다.
   0 5 ∞ 9 1     5 0 2 ∞ ∞   ∞ 2 0 7 ∞   9 ∞ 7 0 2   1 ∞ ∞ 2 0    이때,
1 번 노드를 중간 노드로 한다면,]]></description>
</item><item>
    <title>[C&#43;&#43;]벨만-포드 알고리즘(Bellman-Ford Algorithm)</title>
    <link>https://jyukki97.io/2020-02-25-bellmanford/</link>
    <pubDate>Tue, 25 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-02-25-bellmanford/</guid>
    <description><![CDATA[벨만-포드 알고리즘(Bellman-Ford Algorithm)
벨만-포드 알고리즘(Bellman-Ford Algorithm) 특정 노드에서부터 모든 노드로 가는 최단 경로를 구하는 알고리즘. 그래프에 &ldquo;음수 사이클&quot;이 있는 경우 찾아낼 수 있음. 시간복잡도는 O(nm) 음수 사이클 음수 사이클이 있는지 판단하기 위해서는 n번의 라운드를 추가로 진행해 주면된다. 만약, n번째 라운드에서도 감소하는 경우가 있다면, 음수 사이클이 있다고 판단할 수 있다. 코드 1 2 3 4 5 6  for (i = 0; i &lt;= V; i++) d.push_back(INF); d[x] = 0; for(int i = 1; i &lt;= n - 1; i++) for(auto t : edge(a,b,c)) // a 에서 b로 가는 간선, 가중치 c  d[b] = min(d[b], d[a] + c);   ]]></description>
</item><item>
    <title>[C&#43;&#43;]다익스트라 알고리즘(Dijkstra Algorithm)</title>
    <link>https://jyukki97.io/2020-02-24-dijkstra/</link>
    <pubDate>Mon, 24 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2020-02-24-dijkstra/</guid>
    <description><![CDATA[다익스트라 알고리즘(Dijkstra Algorithm)
다익스트라 알고리즘(Dijkstra Algorithm) 특정 노드에서부터 모든 노드로 가는 최단 경로를 구하는 알고리즘. 가중치가 음수인 간선이 없는 경우에만 사용할 수 있다. 시간복잡도 : O(n + mlog m) (n : 노드의 개수, m : 간선의 갯수) 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  for (i = 0; i &lt;= V; i++) d.push_back(INF); d[k] = 0; p.push({ 0, k }); while (!]]></description>
</item></channel>
</rss>
