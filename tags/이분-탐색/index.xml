<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>이분 탐색 - Tag - JYUKKI&#39;s BLOG</title>
        <link>https://jyukki97.github.io/tags/%EC%9D%B4%EB%B6%84-%ED%83%90%EC%83%89/</link>
        <description>이분 탐색 - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 05 Jul 2021 22:00:40 &#43;0800</lastBuildDate><atom:link href="https://jyukki97.github.io/tags/%EC%9D%B4%EB%B6%84-%ED%83%90%EC%83%89/" rel="self" type="application/rss+xml" /><item>
    <title>[백준]13711 LCS 4</title>
    <link>https://jyukki97.github.io/13711/</link>
    <pubDate>Mon, 05 Jul 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/13711/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/13711
풀이: 전기줄 - 2 참고
코드: 사용언어 : python
1 2 3 4 5 6 7 8 9  import bisect input() d,q=dict.fromkeys(map(int,input().split()),0),[] for k,i in enumerate(map(int,input().split())):d[i]=k for k,i in d.items(): s=bisect.bisect_left(q,i) if s!=len(q):q[s]=i else:q+=[i] print(len(q))   ]]></description>
</item><item>
    <title>[백준]2550 전구</title>
    <link>https://jyukki97.github.io/2550/</link>
    <pubDate>Sun, 04 Jul 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2550/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2550
풀이: 전기줄 - 2 참고
코드: 사용언어 : python
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import bisect d,q,c,e={},[],[],[] n=int(input()) for i in map(int,input().split()): d[i]=0 for k,i in enumerate(map(int,input().split())): d[i]=k for k,i in d.items(): s=bisect.bisect_left(q,i) if s!=len(q):q[s]=i else:q+=[i] c+=[s] s=len(q) print(s) for i in range(n-1,-1,-1): if c[i]==s-1:e+=[list(d)[i]];s-=1 print(&#39; &#39;.join(map(str,sorted(e))))   ]]></description>
</item><item>
    <title>[백준]3745 오름세</title>
    <link>https://jyukki97.github.io/3745/</link>
    <pubDate>Fri, 02 Jul 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/3745/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/3745
풀이: 가장 긴 증가하는 부분 수열 5 참고
파이썬에서 EOF 처리하는 방법을 알게되었다.
C++ 에서는 while문 내부에서 cin이나 scanf의 return 값으로 알 수 있었지만, 파이썬은 안되더라.
그냥 단순하게 try catch 문에서 EOF를 감지해서 EOF 일 때 exit() 하는 방법으로 하는 것 같다.
다른 의견으로는 그냥 무한루프를 돌리면 알아서 중지되면서 맞았습니다가 떴다고 하는데, 나는 안되서 잘 모르겠다.
코드: 사용언어 : python
1 2 3 4 5 6 7 8 9 10  import bisect try: while input(): q=[] for i in map(int,input().]]></description>
</item><item>
    <title>[백준]12738 가장 긴 증가하는 부분 수열 3</title>
    <link>https://jyukki97.github.io/12738/</link>
    <pubDate>Thu, 01 Jul 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/12738/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/12738
풀이: 가장 긴 증가하는 부분 수열 5 참고
코드: 사용언어 : python
1 2 3 4 5 6 7 8  import bisect input() q=[] for i in map(int,input().split()): s=bisect.bisect_left(q,i) if s!=len(q):q[s]=i else:q+=[i] print(len(q))   ]]></description>
</item><item>
    <title>[백준]14003 가장 긴 증가하는 부분 수열 5</title>
    <link>https://jyukki97.github.io/14003/</link>
    <pubDate>Sun, 27 Jun 2021 22:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/14003/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/14003
풀이: 가장 긴 증가하는 부분 수열을 구하는 문제이다.
수열의 0 ~ N 번째 까지 숫자들 중 가장 길게 증가하는 부분 수열을 만들면 된다.
배열을 하나 만든 후 수열의 숫자를 배열에 하나 씩 넣는다.
넣을 때에는 규칙이 있는데, 현재 숫자가 배열의 맨 오른쪽의 숫자보다 크다면, 가장 오른쪽에 추가해 주고, 만약 배열의 숫자 중 현재 숫자가 더 작은 숫자가 있다면, 현재 숫자로 교채해 준다.
이렇게 된다면, 배열은 자동적으로 정렬되게 되고, 최종적으로 만들어진 배열의 크기가 가장 긴 증가하는 부분 수열의 길이가 된다.]]></description>
</item><item>
    <title>[백준]10815 숫자 카드</title>
    <link>https://jyukki97.github.io/2020-03-14-10815/</link>
    <pubDate>Sat, 14 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-03-14-10815/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/10815
풀이: [C++]lower_bound, upper_bound 참고
cin, cout 은 시간초과가 날 수 있으므로 주의하자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int n, m, i, k, a[500002]; int main() { cin &gt;&gt; n; for (i = 0; i &lt; n; i++)	cin &gt;&gt; a[i]; sort(a, a + n); cin &gt;&gt; m; while (m--) { cin &gt;&gt; k; if (*lower_bound(a, a + n, k) == k)	cout &lt;&lt; &#34;1 &#34;; else	cout &lt;&lt; &#34;0 &#34;; } cout &lt;&lt; endl; }   ]]></description>
</item><item>
    <title>[백준]10816 숫자 카드2</title>
    <link>https://jyukki97.github.io/2020-02-26-10816/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-10816/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/10816
풀이: 배열에 숫자 카드들을 넣는다.
배열을 정렬한다.
몇 개 가지고 있는지 구해야 할 카드를 k 라고 할 때,
k가 최초로 나오는 위치 = lower_bound,
k보다 큰 값이 최초로 나오는 위치 = upper_bound
로 구할 수 있다.
즉 upper_bound - lower_bound를 실행한다면 답을 구할 수 있다.
cout과 cin 을 쓰면 시간초과가 나므로 주의하자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int n, m, k, a[500001]; int main() { scanf(&#34;%d&#34;, &amp;n); for (int i = 0; i &lt; n; i++) scanf(&#34;%d&#34;, &amp;a[i]); sort(a, a + n); scanf(&#34;%d&#34;, &amp;m); for (int i = 0; i &lt; m; i++) { scanf(&#34;%d&#34;, &amp;k); auto l = lower_bound(a, a + n, k); auto r = upper_bound(a, a + n, k); printf(&#34;%d &#34;, r - l); } printf(&#34;\n&#34;); return 0; }   ]]></description>
</item><item>
    <title>[백준]1654 랜선 자르기</title>
    <link>https://jyukki97.github.io/2020-02-26-1654/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-1654/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1654
풀이: 배열을 받아온다.
배열의 들어있는 랜선의 길이 중 최댓값이
만들 수 있는 최대 길이의 랜선이므로 최댓값을 설정한다.
최솟값은 1로 설정한다.
최댓값과 최솟값의 중간값을 m이라고 하자.
모든 배열의 원소를 m으로 나눈 몫을 모두 더한다.
더한 값이 필요한 랜선의 갯수보다 작다면, m값이 너무 크다는 것이므로 최댓값을 m - 1 로 바꿔준다.
더한 값이 필요한 랜선의 갯수보다 크거나 같다면, 만들 수 있다는 것이므로 답에 저장해 놓는다.
이때, 랜선의 최대 길이를 찾아야 하므로, 랜선의 갯수와 같다고 바로 끝내지 말고 위로 가면서 최댓값을 찾아야한다.]]></description>
</item><item>
    <title>[백준]2110 공유기 설치</title>
    <link>https://jyukki97.github.io/2020-02-26-2110/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-2110/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2110
풀이: [백준]1654 랜선 자르기 참고
최대 거리를 설정하고,
그 거리를 기준으로 공유기를 설치할 수 있는지 확인하고,
이분탐색으로 최대 거리를 조절해 나간다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; long long n, k, i, a[200001], sum, m, l = 1, r, c = 0, d; int main() { cin &gt;&gt; k &gt;&gt; n; for (i = 0; i &lt; k; i++) cin &gt;&gt; a[i]; sort(a, a + k); r = a[k - 1]; while (l &lt;= r) { sum = 1; m = (r + l) / 2; d = a[0]; for (i = 1; i &lt; k; i++) if (d + m &lt;= a[i]) { d = a[i]; sum++; } if (sum &lt; n)	r = m - 1; else { c = max(c, m); l = m + 1; } } cout &lt;&lt; c &lt;&lt; endl; return 0; }   ]]></description>
</item><item>
    <title>[백준]2805 나무 자르기</title>
    <link>https://jyukki97.github.io/2020-02-26-2805/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-2805/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2805
풀이: [백준]1654 랜선 자르기 참고
m값이 배열의 값보다 작은데 a[i] - m을 할 경우 -값이 나오므로 주의하자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; long long n, k, i, a[1000001], sum, m, l = 1, r = 0, c = 0; int main() { cin &gt;&gt; k &gt;&gt; n; for (i = 0; i &lt; k; i++) { cin &gt;&gt; a[i]; r = max(r, a[i]); } while (l &lt;= r) { sum = 0; m = (r + l) / 2; for (i = 0; i &lt; k; i++) sum += a[i] &lt; m ?]]></description>
</item></channel>
</rss>
