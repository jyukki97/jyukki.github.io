<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>이분 탐색 - Tag - JYUKKI&#39;s BLOG</title>
        <link>https://jyukki97.github.io/tags/%EC%9D%B4%EB%B6%84-%ED%83%90%EC%83%89/</link>
        <description>이분 탐색 - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 14 Mar 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jyukki97.github.io/tags/%EC%9D%B4%EB%B6%84-%ED%83%90%EC%83%89/" rel="self" type="application/rss+xml" /><item>
    <title>[백준]10815 숫자 카드</title>
    <link>https://jyukki97.github.io/2020-03-14-10815/</link>
    <pubDate>Sat, 14 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-03-14-10815/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/10815
풀이: [C++]lower_bound, upper_bound 참고
cin, cout 은 시간초과가 날 수 있으므로 주의하자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int n, m, i, k, a[500002]; int main() { cin &gt;&gt; n; for (i = 0; i &lt; n; i++)	cin &gt;&gt; a[i]; sort(a, a + n); cin &gt;&gt; m; while (m--) { cin &gt;&gt; k; if (*lower_bound(a, a + n, k) == k)	cout &lt;&lt; &#34;1 &#34;; else	cout &lt;&lt; &#34;0 &#34;; } cout &lt;&lt; endl; }   ]]></description>
</item><item>
    <title>[백준]10816 숫자 카드2</title>
    <link>https://jyukki97.github.io/2020-02-26-10816/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-10816/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/10816
풀이: 배열에 숫자 카드들을 넣는다.
배열을 정렬한다.
몇 개 가지고 있는지 구해야 할 카드를 k 라고 할 때,
k가 최초로 나오는 위치 = lower_bound,
k보다 큰 값이 최초로 나오는 위치 = upper_bound
로 구할 수 있다.
즉 upper_bound - lower_bound를 실행한다면 답을 구할 수 있다.
cout과 cin 을 쓰면 시간초과가 나므로 주의하자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int n, m, k, a[500001]; int main() { scanf(&#34;%d&#34;, &amp;n); for (int i = 0; i &lt; n; i++) scanf(&#34;%d&#34;, &amp;a[i]); sort(a, a + n); scanf(&#34;%d&#34;, &amp;m); for (int i = 0; i &lt; m; i++) { scanf(&#34;%d&#34;, &amp;k); auto l = lower_bound(a, a + n, k); auto r = upper_bound(a, a + n, k); printf(&#34;%d &#34;, r - l); } printf(&#34;\n&#34;); return 0; }   ]]></description>
</item><item>
    <title>[백준]1654 랜선 자르기</title>
    <link>https://jyukki97.github.io/2020-02-26-1654/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-1654/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1654
풀이: 배열을 받아온다.
배열의 들어있는 랜선의 길이 중 최댓값이
만들 수 있는 최대 길이의 랜선이므로 최댓값을 설정한다.
최솟값은 1로 설정한다.
최댓값과 최솟값의 중간값을 m이라고 하자.
모든 배열의 원소를 m으로 나눈 몫을 모두 더한다.
더한 값이 필요한 랜선의 갯수보다 작다면, m값이 너무 크다는 것이므로 최댓값을 m - 1 로 바꿔준다.
더한 값이 필요한 랜선의 갯수보다 크거나 같다면, 만들 수 있다는 것이므로 답에 저장해 놓는다.
이때, 랜선의 최대 길이를 찾아야 하므로, 랜선의 갯수와 같다고 바로 끝내지 말고 위로 가면서 최댓값을 찾아야한다.]]></description>
</item><item>
    <title>[백준]2110 공유기 설치</title>
    <link>https://jyukki97.github.io/2020-02-26-2110/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-2110/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2110
풀이: [백준]1654 랜선 자르기 참고
최대 거리를 설정하고,
그 거리를 기준으로 공유기를 설치할 수 있는지 확인하고,
이분탐색으로 최대 거리를 조절해 나간다.
코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; long long n, k, i, a[200001], sum, m, l = 1, r, c = 0, d; int main() { cin &gt;&gt; k &gt;&gt; n; for (i = 0; i &lt; k; i++) cin &gt;&gt; a[i]; sort(a, a + k); r = a[k - 1]; while (l &lt;= r) { sum = 1; m = (r + l) / 2; d = a[0]; for (i = 1; i &lt; k; i++) if (d + m &lt;= a[i]) { d = a[i]; sum++; } if (sum &lt; n)	r = m - 1; else { c = max(c, m); l = m + 1; } } cout &lt;&lt; c &lt;&lt; endl; return 0; }   ]]></description>
</item><item>
    <title>[백준]2805 나무 자르기</title>
    <link>https://jyukki97.github.io/2020-02-26-2805/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-2805/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2805
풀이: [백준]1654 랜선 자르기 참고
m값이 배열의 값보다 작은데 a[i] - m을 할 경우 -값이 나오므로 주의하자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; long long n, k, i, a[1000001], sum, m, l = 1, r = 0, c = 0; int main() { cin &gt;&gt; k &gt;&gt; n; for (i = 0; i &lt; k; i++) { cin &gt;&gt; a[i]; r = max(r, a[i]); } while (l &lt;= r) { sum = 0; m = (r + l) / 2; for (i = 0; i &lt; k; i++) sum += a[i] &lt; m ?]]></description>
</item><item>
    <title>[백준]k번째 수</title>
    <link>https://jyukki97.github.io/2020-02-26-1300/</link>
    <pubDate>Wed, 26 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-26-1300/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1300
풀이: [백준]1654 랜선 자르기 참고
현재 숫자의 순서가 k를 넘어간다면,
오른쪽 탐색을, 아니라면 왼쪽으로 탐색한다.
int형 사이즈를 넘어가니 long long으로 바꿔주자. 코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; long long n, k, i, sum, m, l = 1, r, c; int main() { cin &gt;&gt; n &gt;&gt; k; r = n * n; c = r; while (l &lt;= r) { sum = 0; m = (r + l) / 2; for (i = 1; i &lt;= n; i++) sum += min(n, m / i); if (sum &lt; k)	l = m + 1; else { c = min(c, m); r = m - 1; } } cout &lt;&lt; c &lt;&lt; &#39;\n&#39;; }   ]]></description>
</item><item>
    <title>[C&#43;&#43;]lower_bound, upper_bound</title>
    <link>https://jyukki97.github.io/2020-02-19-bound/</link>
    <pubDate>Wed, 19 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-19-bound/</guid>
    <description><![CDATA[lower_bound, upper_bound
- 기본적으로 두개 모두 &ldquo;이진 탐색(Binary Serch)&rdquo; 기반의 탐색방법 lower_bound 1  lower_bound(arr, arr + n, key);   - key 값의 가장 낮은 위치를 찾는다. - key 값이 없다면 key 값보다 큰 가장 작은 정수의 위치를 반환한다. - 반환값이 &ldquo;iterator&rdquo; 이다. upper_bound 1  upper_bound(arr, arr + n, key);   - key 값을 초과하는 가장 첫번째 원소의 위치. - 반환값이 &ldquo;iterator&rdquo; 이다. ]]></description>
</item></channel>
</rss>
