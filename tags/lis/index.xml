<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>LIS - Tag - JYUKKI&#39;s BLOG</title>
        <link>https://jyukki97.io/tags/lis/</link>
        <description>LIS - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Jun 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jyukki97.io/tags/lis/" rel="self" type="application/rss+xml" /><item>
    <title>[백준]1365 꼬인 전깃줄</title>
    <link>https://jyukki97.io/2019-06-05-1365/</link>
    <pubDate>Wed, 05 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2019-06-05-1365/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1365
풀이:  https://jyukki97.github.io/2352/ 와 같은 문제이므로 참고  코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std; vector&lt;int&gt;d; int main(void) { int n, s, l; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; s; l = lower_bound(d.begin(), d.end(), s) - d.begin(); if (l == d.]]></description>
</item><item>
    <title>[백준]2352 반도체 설계</title>
    <link>https://jyukki97.io/2019-06-04-2352/</link>
    <pubDate>Tue, 04 Jun 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2019-06-04-2352/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/2352
풀이:  맨 처음 값부터 하나 하나 입력받는다. 입력받은 값이 벡터 안에 있는 값들 보다 크다면 벡터에 맨 뒤에 넣는다. 벡터의 처음부터 검색했을 때, 입력받은 값보다 큰 값이 있다면, 그 값과 교체한다. 벡터의 원소 갯수를 출력한다. 일반적으로 for문을 두개 쓴 O(n^2)의 코드는 시간초과가 나므로 주의하자  코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std; vector&lt;int&gt;d; int main(void) { int n, s, l; cin &gt;&gt; n; while(n--) { cin &gt;&gt; s; l = lower_bound(d.]]></description>
</item><item>
    <title>[백준]1937 욕심쟁이 판다</title>
    <link>https://jyukki97.io/2019-05-28-1937/</link>
    <pubDate>Tue, 28 May 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2019-05-28-1937/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1937
풀이:  k[a][b]를 (a , b)지점에서 시작한 판다가 살아남은 최대 일수라고 한다. (a, b) 주변 십자가 방향 지점( (1,0), (-1, 0), (0, 1), (0, -1)) 에서 대나무의 양이 (a, b) 보다 낮다면 그 지점에 최대 일수에서 +1 한 값이 k[a][b] 값이 된다. 높은 값에서 낮은값으로 찾아가면서 최대 일수를 구한다. 시간초과가 날 수 있으므로 메모이제이션을 통해 시행횟수를 제한해준다.  코드: 사용언어 : c++
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int n, s[510][510], k[510][510]; int dx[] = { 1,0,0,-1 }; int dy[] = { 0,1,-1,0 }; int panda(int a, int b){ for (int y = 0; y &lt; 4; y++) if (a + dy[y] &gt;= 0 &amp;&amp; a + dy[y] &lt; n &amp;&amp; b + dx[y] &gt;= 0 &amp;&amp; b + dx[y] &lt; n) if (s[a][b] &lt; s[a + dy[y]][b + dx[y]]) { if(k[a + dy[y]][b + dx[y]] == 1) k[a][b] = max(k[a][b], panda(a + dy[y], b + dx[y]) + 1); else k[a][b] = max(k[a][b], k[a + dy[y]][b + dx[y]] + 1); } return k[a][b]; } int main(void) { cin &gt;&gt; n; int m = 1; fill(&amp;k[0][0], &amp;k[n][n], 1); for (int i = 0; i &lt; n; i++) for (int t = 0; t &lt; n; t++) cin &gt;&gt; s[i][t]; for (int i = 0; i &lt; n; i++) for (int t = 0; t &lt; n; t++) m = max(m, panda(i, t)); cout &lt;&lt; m &lt;&lt; endl; return 0; }   ]]></description>
</item><item>
    <title>[백준]11568 민균이의 계략</title>
    <link>https://jyukki97.io/2018-01-02-11568/</link>
    <pubDate>Tue, 02 Jan 2018 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2018-01-02-11568/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/11568
풀이:  11053 가장 긴 증가하는 부분 수열 의 문제와 같으므로 링크를 참고  코드: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; long long a[1001] = { 0 }, b[1001]; int main(void) { long long n, temp; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; a[i]; b[i] = 1; } for (int i = 0; i &lt; n; i++) { temp = 0; for (int t = 0; t &lt;= i; t++) { if (a[i] &gt; a[i - t]) temp = max(b[i - t], temp); } b[i] += temp; } for (int i = 0; i &lt; n; i++) { temp = max(b[i], temp); } cout &lt;&lt; temp &lt;&lt; endl; return 0; }   ]]></description>
</item><item>
    <title>[백준]1965 상자넣기</title>
    <link>https://jyukki97.io/2017-12-01-1965/</link>
    <pubDate>Fri, 01 Dec 2017 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.io/2017-12-01-1965/</guid>
    <description><![CDATA[https://www.acmicpc.net/problem/1965
풀이:  b[i] 가 i 번째 상자를 골랐을 때의 상자의 최대 갯수라고 하자. b[i] = b[i] + 0~i 번째 까지 중 가장 큰 값 이다.  코드: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std; int main(void) { int n,temp; cin &gt;&gt; n; int a[1001] = { 0 }; int b[1001]; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; a[i]; b[i] = 1; } for (int i = 0; i &lt; n; i++) { temp = 0; for (int t = 0; t &lt;= i; t++) { if (a[i] &gt; a[i - t]) temp = max(b[i - t], temp); } b[i] += temp; } for (int i = 0; i &lt; n; i++) { temp = max(b[i], temp); } cout &lt;&lt; temp &lt;&lt; endl; return 0; }   ]]></description>
</item></channel>
</rss>
