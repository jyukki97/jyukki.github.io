<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Learn - Tag - JYUKKI&#39;s BLOG</title>
        <link>https://jyukki97.github.io/tags/learn/</link>
        <description>Learn - Tag - JYUKKI&#39;s BLOG</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 14 Mar 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jyukki97.github.io/tags/learn/" rel="self" type="application/rss+xml" /><item>
    <title>[C&#43;&#43;]위상 정렬(Topological Sort)</title>
    <link>https://jyukki97.github.io/2020-03-14-topologicalsort/</link>
    <pubDate>Sat, 14 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-03-14-topologicalsort/</guid>
    <description><![CDATA[위상 정렬(Topological Sort)
위상 정렬 방향 그래프의 노드에 대해 순서를 매겨 정렬하는 방법 정렬 후에 각 노드에 대해 순서가 위배되지 않아야한다. 사이클이 있다면 불가능하다. 들어오는 간선이 없는 노드를 삭제하면서, 정렬한다. ]]></description>
</item><item>
    <title>[C&#43;&#43;]비트연산자</title>
    <link>https://jyukki97.github.io/2020-02-28-bitoperator/</link>
    <pubDate>Fri, 28 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-28-bitoperator/</guid>
    <description><![CDATA[비트연산자
비트연산자 DP문제를 푸는데 있어, 연산속도를 빠르게 하기 위해 사용 &laquo; , &raquo; 시프트 연산자. 비트의 자리를 옮겨줌 ex)
1 &laquo; 3
 1000
 NOT - ( ~ ) 0 은 1로 1은 0으로 반대로 바꿔준다. ex)
0000000
 1111111
 AND - ( &amp; ) 둘 다 1 일때만 1, 아니면 0 ex)
1100110
&amp; 1011001
 1000110
 OR - ( | ) 둘 중 하나라도 1이라면 1, 아니면 0 ex)]]></description>
</item><item>
    <title>[C&#43;&#43;]플로이드-와샬 알고리즘(Floyd-Warshall Algorithm)</title>
    <link>https://jyukki97.github.io/2020-02-27-floydwarshall/</link>
    <pubDate>Thu, 27 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-27-floydwarshall/</guid>
    <description><![CDATA[플로이드-와샬 알고리즘(Floyd-Warshall Algorithm)
플로이드-와샬 알고리즘(Floyd-Warshall Algorithm) 한번의 실행으로 &ldquo;모든 노드&rdquo; 간 최단 경로를 구하는 알고리즘. 시간복잡도 $$ O(n^3) $$
위 그림의 초기값은 다음과 같다.
   0 5 ∞ 9 1     5 0 2 ∞ ∞   ∞ 2 0 7 ∞   9 ∞ 7 0 2   1 ∞ ∞ 2 0    이때,
1 번 노드를 중간 노드로 한다면,]]></description>
</item><item>
    <title>[C&#43;&#43;]벨만-포드 알고리즘(Bellman-Ford Algorithm)</title>
    <link>https://jyukki97.github.io/2020-02-25-bellmanford/</link>
    <pubDate>Tue, 25 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-25-bellmanford/</guid>
    <description><![CDATA[벨만-포드 알고리즘(Bellman-Ford Algorithm)
벨만-포드 알고리즘(Bellman-Ford Algorithm) 특정 노드에서부터 모든 노드로 가는 최단 경로를 구하는 알고리즘. 그래프에 &ldquo;음수 사이클&quot;이 있는 경우 찾아낼 수 있음. 시간복잡도는 O(nm) 음수 사이클 음수 사이클이 있는지 판단하기 위해서는 n번의 라운드를 추가로 진행해 주면된다. 만약, n번째 라운드에서도 감소하는 경우가 있다면, 음수 사이클이 있다고 판단할 수 있다. 코드 1 2 3 4 5 6  for (i = 0; i &lt;= V; i++) d.push_back(INF); d[x] = 0; for(int i = 1; i &lt;= n - 1; i++) for(auto t : edge(a,b,c)) // a 에서 b로 가는 간선, 가중치 c  d[b] = min(d[b], d[a] + c);   ]]></description>
</item><item>
    <title>[C&#43;&#43;]다익스트라 알고리즘(Dijkstra Algorithm)</title>
    <link>https://jyukki97.github.io/2020-02-24-dijkstra/</link>
    <pubDate>Mon, 24 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-24-dijkstra/</guid>
    <description><![CDATA[다익스트라 알고리즘(Dijkstra Algorithm)
다익스트라 알고리즘(Dijkstra Algorithm) 특정 노드에서부터 모든 노드로 가는 최단 경로를 구하는 알고리즘. 가중치가 음수인 간선이 없는 경우에만 사용할 수 있다. 시간복잡도 : O(n + mlog m) (n : 노드의 개수, m : 간선의 갯수) 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  for (i = 0; i &lt;= V; i++) d.push_back(INF); d[k] = 0; p.push({ 0, k }); while (!]]></description>
</item><item>
    <title>[C&#43;&#43;]lower_bound, upper_bound</title>
    <link>https://jyukki97.github.io/2020-02-19-bound/</link>
    <pubDate>Wed, 19 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-19-bound/</guid>
    <description><![CDATA[lower_bound, upper_bound
- 기본적으로 두개 모두 &ldquo;이진 탐색(Binary Serch)&rdquo; 기반의 탐색방법 lower_bound 1  lower_bound(arr, arr + n, key);   - key 값의 가장 낮은 위치를 찾는다. - key 값이 없다면 key 값보다 큰 가장 작은 정수의 위치를 반환한다. - 반환값이 &ldquo;iterator&rdquo; 이다. upper_bound 1  upper_bound(arr, arr + n, key);   - key 값을 초과하는 가장 첫번째 원소의 위치. - 반환값이 &ldquo;iterator&rdquo; 이다. ]]></description>
</item><item>
    <title>[C&#43;&#43;]set predicate</title>
    <link>https://jyukki97.github.io/2020-02-16-setpredicate/</link>
    <pubDate>Sun, 16 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-16-setpredicate/</guid>
    <description><![CDATA[set predicate
set 이라는 컨테이너는 기본적으로 &ldquo;오름차순&rdquo; 으로 정렬된다.
이를 바꾸기 위해 정렬 기준을 바꿔 주어야한다.
정렬기준은
1 2 3 4 5  bool compare(const key_type key_typeA, const key_type key_typeB){ return key_typeA &lt; key_typeB; }   와 같이 bool 형식을 통해 바꿀 수 있다.
정렬기준을 적용하는 방법은
1  set&lt;key_type, decltype(&amp;compare)&gt; a(&amp;compare)   과 같이 하면된다.]]></description>
</item><item>
    <title>[C&#43;&#43;]transform</title>
    <link>https://jyukki97.github.io/2020-02-07-transform/</link>
    <pubDate>Fri, 07 Feb 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-02-07-transform/</guid>
    <description><![CDATA[transform
1  #include&lt;algorithm&gt;  사용하기 위해서는 algorithm을 include해준다.
기본적인 사용법은 이렇게된다.
1 2  transform(a.begin(), a.end(), a.begin(), fuc()); // transform(시작주소, 끝 주소, 저장할 곳의 시작 주소, 함수);   ex)
배열 a의 모든 값을 3씩 증가시키기
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &lt;iostream&gt; #include &lt;vector&gt;#include &lt;algorithm&gt; using namespace std; int func(int n) { return n + 3; } int main() { vector&lt;int&gt; a; for(int i = 0; i &lt; 5; i++) a.]]></description>
</item><item>
    <title>[C&#43;&#43;]정렬</title>
    <link>https://jyukki97.github.io/2020-01-29-sort/</link>
    <pubDate>Wed, 29 Jan 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-01-29-sort/</guid>
    <description><![CDATA[정렬 ( sort )
1  #include&lt;algorithm&gt;  사용하기 위해서는 algorithm을 include해준다.
기본적인 사용법은 이렇게된다.
1  sort(a.begin(), a.end());   기본적인 방식은 오름차순 정렬이다.
정렬의 방식을 바꾸기 위해서는 다음과 같은 방식을 사용한다.
1  sort(a.begin(), a.end(), compare);   이 때, compare 함수는 따로 만들어 주어야한다.
예를들어
내림차 순으로 정렬하기 위해서는
1 2 3  bool compare(int a, int b){ return a &gt; b; }   과 같이 만들어 주면 된다.]]></description>
</item><item>
    <title>[C&#43;&#43;]순열 </title>
    <link>https://jyukki97.github.io/2020-01-28-next_permutation/</link>
    <pubDate>Tue, 28 Jan 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://jyukki97.github.io/2020-01-28-next_permutation/</guid>
    <description><![CDATA[순열 ( next_permutation )
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std; int main() { string str = &#34;123&#34;; sort(str.begin(), str.end()); do { for (int i = 1; i &lt;= str.size(); ++i) { int n = stoi(str.substr(0, i)); cout &lt;&lt; n &lt;&lt; endl; } }while (next_permutation(str.begin(), str.end())); return 0; }   출력 :
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  1 12 123 1 13 132 2 21 213 2 23 231 3 31 312 3 32 321   ]]></description>
</item></channel>
</rss>
